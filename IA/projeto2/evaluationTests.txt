        # # Adder
        # walls = currentGameState.getWalls() 
        # top, right = walls.height - 2, walls.width - 2
        # adder = top * right

        # # Food
        # successorGameState = currentGameState.generatePacmanSuccessor(action)
        # oldFoodCount = currentGameState.getNumFood()
        # newFoodCount = successorGameState.getNumFood()
        # newFood = successorGameState.getFood().asList()
        # # newCapsules = successorGameState.getCapsules()

        # # Pacman
        # newPos = successorGameState.getPacmanPosition()

        # # Ghost
        # newGhostStates = successorGameState.getGhostStates()
        # newScaredTimes = [ghostState.scaredTimer for ghostState in newGhostStates]

        # # Eat one food
        # evaluation += abs(oldFoodCount - newFoodCount) * adder

        # # Moves closer to a food
        # foodDistances = [manhattanDistance(newPos, food) for food in newFood if len(newFood) != 0]
        # evaluation += (adder / min(foodDistances)) if len(newFood) != 0 else adder

        # # capsulesDistance = [manhattanDistance(newPos, newCapsules) for newCapsules in newCapsules if len(newCapsules) != 0]  
        # # evaluation += (adder / (min(capsulesDistance) * 3)) if len(newCapsules) != 0 else adder

        # # Run from ghost or hunt a ghost
        # ghostDistances = [manhattanDistance(newPos, ghost.getPosition()) for ghost in newGhostStates]
        # for index, time in enumerate(newScaredTimes):
        #     canBeHunted = 1 if time > 0 else -1
        #     evaluation += canBeHunted * (adder / ghostDistances[index]) 
        
        
        
        # New game state
        successorGameState = currentGameState.generatePacmanSuccessor(action)

        # Helpers
        walls = currentGameState.getWalls() 
        top, right = walls.height - 2, walls.width - 2
        limit = top * right

        oldFoodCount = currentGameState.getNumFood()
        newFoodCount = successorGameState.getNumFood()
        newFood = successorGameState.getFood().asList()
        # newCapsules = successorGameState.getCapsules()

        newPos = successorGameState.getPacmanPosition()

        newGhostStates = successorGameState.getGhostStates()
        newScaredTimes = [ghostState.scaredTimer for ghostState in newGhostStates]

        # Calc evaluation
        evaluation += limit * 0.1 if abs(oldFoodCount - newFoodCount) >= 1 else 0

        foodDistances = [manhattanDistance(newPos, food) for food in newFood if len(newFood) != 0]
        multiplier = 0.3
        for i in range(1, min(foodDistances)):
            multiplier -= 0.01 
        evaluation += limit * multiplier if multiplier >= 0 else 0

        ghostDistances = [manhattanDistance(newPos, ghost.getPosition()) for ghost in newGhostStates]
        for index, time in enumerate(newScaredTimes):
            canBeHunted = 1 if time > 0 else -1
            multiplier = 0
            for i in range (int(ghostDistances[index])):
                multiplier += 0.02 * canBeHunted
            evaluation += limit * multiplier if multiplier >= 0 else 0

        print(evaluation, action)

        return evaluation